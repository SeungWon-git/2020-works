


----------------------------------------------
소스.cpp - 2020-10-12 오후 2:23:16 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <algorithm>
#include "save.h"	
using namespace std;

char c[100];	//DATA segment - 전역변수

int main()
{
	char c[100];	//STACK segment - 지역변수

	new char[100];	//HEAP,Free Store

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:33:22 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 100개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[100];	//1번

	for (int i = 0; i < 100; ++i)
		c[i] = uid(dre);

	cout << c << endl; //뒤에 이상한 값이 나올때도있고 안나올때도 있다. 이는 마지막 널문자까지 표현하겠다하기 때문

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:34:46 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 100개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[100];	//1번

	for (char& c: c)	//유지보수에 훨씬 좋다!
		c = uid(dre);

	for (char c : c)
		cout << c;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:35:07 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 1000개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[1000];	//1번

	for (char& c: c)	//유지보수에 훨씬 좋다!
		c = uid(dre);

	for (char c : c)
		cout << c;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:37:04 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 100개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	//1번
	char c[100];

	for (char& c: c)	
		c = uid(dre);
	//2번
	sort(begin(c), end(c));

	for (char ch : c)
		cout << ch;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:37:46 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 100개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	//1번
	char c[100];

	for (char& c: c)	
		c = uid(dre);
	//2번
	sort(begin(c), end(c), [](char a, char b)
		{return a > b; }
	);

	for (char ch : c)
		cout << ch;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:38:32 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 10000개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	//1번
	char c[10000];

	for (char& c: c)	
		c = uid(dre);
	//2번
	sort(begin(c), end(c), [](char a, char b)
		{return a > b; }
	);
	//3번
	for (char ch : c)
		cout << ch;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:43:16 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 10000개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

//도대체 지역변수는 몇개까지 저장 가능하지?

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[100'00];

	//정렬
	sort(begin(c), end(c), [](char a, char b)
		{return a > b; }
	);
	
	//제일 첫글자
	cout << c[0] << endl;

	//제일 끝글자
	cout << c[sizeof(c) - 1] << endl;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:45:32 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 10000개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

//도대체 지역변수는 몇개까지 저장 가능하지?

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[100'000];//100 kb

	//정렬
	sort(begin(c), end(c), [](char a, char b)
		{return a > b; }
	);
	
	//제일 첫글자
	cout << c[0] << endl;

	//제일 끝글자
	cout << c[sizeof(c) - 1] << endl;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:46:08 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 10000개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

//도대체 지역변수는 몇개까지 저장 가능하지?

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[1'000'000];//1 mb

	//정렬
	sort(begin(c), end(c), [](char a, char b)
		{return a > b; }
	);
	
	//제일 첫글자
	cout << c[0] << endl;

	//제일 끝글자
	cout << c[sizeof(c) - 1] << endl;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:48:46 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include <algorithm>
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 10000개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

//도대체 지역변수는 몇개까지 저장 가능하지?

default_random_engine dre;
uniform_int_distribution<> uid{ 'a','z' };

int main()
{
	char c[1'000'000];	//c는 지역변수이고 STACK에 생성된다.
						//STACK의 크기는 1MB가 최댓값이다.

	//정렬
	sort(begin(c), end(c), [](char a, char b)
		{return a > b; }
	);
	
	//제일 첫글자
	cout << c[0] << endl;

	//제일 끝글자
	cout << c[sizeof(c) - 1] << endl;

	cout << endl << endl;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:50:43 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[과제] 스택을 overflow 해보라


int main()
{
	save("소스.cpp");
	static int i {};
	cout << "main 재귀호출(recursive call) - " << ++i << endl;
	main();

}



----------------------------------------------
소스.cpp - 2020-10-12 오후 2:59:07 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[과제] main()이 10번 호출되면 STACK이 넘치게 해 보시오.


int main()
{

	char c[100'000];
	//c메모리 만들기는 했어? 시작번지는 어디니?(이제야 실제로 메모리를 배정한다.)
	cout << static_cast<void*>(c) << endl;

	static int i {};
	cout << "main 재귀호출(recursive call) - " << ++i << endl;

	if (i == 1)
		save("소스.cpp");

	main();

}





----------------------------------------------
소스.cpp - 2020-10-12 오후 3:00:14 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//스택의 한계는 1MB이다!

int main()
{

	save("소스.cpp");

}





----------------------------------------------
소스.cpp - 2020-10-12 오후 3:03:08 - (월요일)
----------------------------------------------

//2020.2학기 C++															(5주2일)
//
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

char c[500'000'000];

int main()
{
	new char [500'000'000];

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오전 1:55:51 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주1일)
//
// 교수님 극대노로 수업 안함...
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

char c[500'000'000];

int main()
{
	new char [500'000'000];

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 10:44:23 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

// 정수 100개를 저장해보자

int a[100];

int main()
{
	int a[100];

	new int [100];

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 10:46:09 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[100'000'000]; //DATA - 이때 어떤일이 일어나나?
					//400메가 바이트의 메모리를 사용중이다.

int main()
{

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:14:01 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[100'000'000]; //DATA - 이때 어떤일이 일어나나?
					//400메가 바이트의 메모리를 사용중이다.
//메모리는 시스템이 제공하는 자원이다.
// 작업관리자에서 프로그램이 사용하는 메모리를 관찰할 수 있다.

int main()
{
	for (int i = 0; i < 1'0000'0000; ++i)
		a[i] = i;

	cout << "키를 누르면 끝납니다. ";
	char ch;
	cin >> ch;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:15:37 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[200'000'000]; //DATA - 이때 어떤일이 일어나나?
					//800메가 바이트의 메모리를 사용중이다.
//메모리는 시스템이 제공하는 자원이다.
// 작업관리자에서 프로그램이 사용하는 메모리를 관찰할 수 있다.

int main()
{
	for (int& n : a)
		n = 333;

	cout << "키를 누르면 끝납니다. ";
	char ch;
	cin >> ch;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:16:05 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[300'000'000]; //DATA - 이때 어떤일이 일어나나?
					//1200메가 바이트의 메모리를 사용중이다.
//메모리는 시스템이 제공하는 자원이다.
// 작업관리자에서 프로그램이 사용하는 메모리를 관찰할 수 있다.

int main()
{
	for (int& n : a)
		n = 333;

	cout << "키를 누르면 끝납니다. ";
	char ch;
	cin >> ch;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:19:56 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[100'000'000];
//DATA - 이때 어떤일이 일어나나?
//1. 시스템 메모리가 이 크기 만큼사용된다.
// 관찰 - exe 파일의 크기는 얼마인가? - 3KB 

int main()
{
	for (int& n : a)
		n = 333;

	cout << "키를 누르면 끝납니다. ";
	char ch;
	cin >> ch;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:20:48 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[100'000'000]{ 1,2,3};
//DATA - 이때 어떤일이 일어나나?
//1. 시스템 메모리가 이 크기 만큼사용된다.
// 관찰 - exe 파일의 크기는 얼마인가? - 28KB 

int main()
{
	for (int& n : a)
		n = 333;

	cout << "키를 누르면 끝납니다. ";
	char ch;
	cin >> ch;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:22:53 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[100'000'000]{ 1,2,3};
//DATA - 이때 어떤일이 일어나나?
//1. 시스템 메모리가 이 크기 만큼사용된다.
// 관찰 - exe 파일의 크기는 얼마인가? - 28KB -> 381MB 

int main()
{
	for (int& n : a)
		n = 333;

	cout << "키를 누르면 끝납니다. ";
	char ch;
	cin >> ch;

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:24:30 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK
//2. DATA
//3. FREE
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

//[문제]
// 1.임의의 소문자 500'000'000(5억)개를 저장하라.
// 2.내림차순으로 정렬하라.
// 3.정렬한 문자를 출력하라.

int a[100'000'000]{ 1,2,3};
//DATA - 이때 어떤일이 일어나나?
//1. 시스템 메모리가 이 크기 만큼사용된다.
// 관찰 - exe 파일의 크기는 얼마인가? - 28KB -> 381MB 
//2. 전역메모리를 초기화하면 메모리의 값이 그대로 파일에 저장된다.

int main()
{

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:35:47 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[실습] 시스템의 메모리를 동적으로 할당해본다.
// 일정시간마다 시스템에 일정한크기의 메모리를 요청한다.

const int SIZE = 10'000;

int main()
{
	save("소스.cpp");

	int i = 0;
	while (true) {
		new char[SIZE] {3};
		this_thread::sleep_for(50ms);
		cout << i++ <<"메모리 요청 - " << SIZE << endl;
	}

	
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:47:50 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[실습] 시스템의 메모리를 동적으로 할당해본다.
//1. 시스템에게 일정크기의 메모리를 요청한다.
//2. 메모리를 사용한다.
//3. 사용했으면 반환한다.


int main()
{
	save("소스.cpp");

	while (true) {
		cout << "필요한 정수 갯수를 알려주세요: ";
		int num;
		cin >> num;
		int* p = new int[num]; //num*4 바이트 1. 메모리 얻음
		//같은표현 int* p{ new int[num] }; 
		// 실제로 사용하자 , 근데 얘는 이름을 붙여줄수가 없네?! 뭘라고 부르지?
		// 시작번지를 기억하는포인터 변수를 만들어서 이를 가져와서 num만큼 알아서 사용하라 하면된다. (동적할당은 알아서 메모리를 사용한다.)
		cout << "메모리에 값을 기록" << endl; //2. 사용
		//기록
		for (int i = 0; i < num; ++i)
			p[i] = i;

		cout << "키를 누르면 메모리를 반환합니다. ";	//작업관리자로 관찰
		char ch;
		cin >> ch;

		delete[] p;		//3. 메모리 반환
	}

	
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:48:17 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[실습] 시스템의 메모리를 동적으로 할당해본다.
//1. 시스템에게 일정크기의 메모리를 요청한다.
//2. 메모리를 사용한다.
//3. 사용했으면 반환한다.


int main()
{
	save("소스.cpp");

	while (true) {
		cout << "필요한 정수 갯수를 알려주세요: ";
		int num;
		cin >> num;
		int* p = new int[num]; //num*4 바이트 1. 메모리 얻음
		//같은표현 int* p{ new int[num] }; 
		// 실제로 사용하자 , 근데 얘는 이름을 붙여줄수가 없네?! 뭘라고 부르지?
		// 시작번지를 기억하는포인터 변수를 만들어서 이를 가져와서 num만큼 알아서 사용하라 하면된다. (동적할당은 알아서 메모리를 사용한다.)
		cout << "메모리에 값을 기록" << endl; //2. 사용
		//기록
		for (int i = 0; i < num; ++i)
			p[i] = i;

		cout << "키를 누르면 메모리를 반환합니다. ";	//작업관리자로 관찰
		char ch;
		cin >> ch;

		delete[] p;		//3. 메모리 반환
	}

	
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:51:28 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[실습] 시스템의 메모리를 동적으로 할당해본다.
//1. 시스템에게 일정크기의 메모리를 요청한다.
//2. 메모리를 사용한다.
//3. 사용했으면 반환한다.


int main()
{
	save("소스.cpp");

	while (true) {
		cout << "필요한 정수 갯수를 알려주세요: ";
		int num;
		cin >> num;
		int* p = new int[num]; //num*4 바이트 1. 메모리 얻음
		//같은표현 int* p{ new int[num] }; 
		// 실제로 사용하자 , 근데 얘는 이름을 붙여줄수가 없네?! 뭘라고 부르지?
		// 시작번지를 기억하는포인터 변수를 만들어서 이를 가져와서 num만큼 알아서 사용하라 하면된다. (동적할당은 알아서 메모리를 사용한다.)
		cout << "메모리에 값을 기록" << endl; //2. 사용
		//기록
		for (int i = 0; i < num; ++i)
			p[i] = i;

		cout << "키를 누르면 메모리를 반환합니다. ";	//작업관리자로 관찰
		char ch;
		cin >> ch;

		delete[] p;		//3. 메모리 반환
	}

	//데이터(전역변수)에 비해 실행파일의 크기가 훨씬 작음을 확인
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:55:10 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[시연] 시스템의 메모리를 안준다고 할때까지 동적으로 할당해보자.


int main()
{
	save("소스.cpp");

	cout << "메모리 계속 할당중 ";

	while (true) {
		int* p = new int[2500'0000];// 100MB
		for (int i = 0; i < 2500'0000; ++i)
			p[i] = i;

		this_thread::sleep_for(1s);

		cout << ".";	//죽기전까지 작업관리자 관찰
	}
	
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:56:41 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[시연] 시스템의 메모리를 안준다고 할때까지 동적으로 할당해보자.


int main()
{
	save("소스.cpp");

	cout << "메모리 계속 할당중 ";

	while (true) {
		int* p = new int[2500'0000];// 100MB
		for (int i = 0; i < 2500'0000; ++i)
			p[i] = i;

		this_thread::sleep_for(1s);

		cout << ".";	//죽기전까지 작업관리자 관찰 
						//=> 20번 점을 찍고(2GB) 프로그램 사망
	}
	
}



----------------------------------------------
소스.cpp - 2020-10-16 오후 11:59:34 - (금요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <thread>
#include "save.h"	
using namespace std;

//[시연] 시스템의 메모리를 안준다고 할때까지 동적으로 할당해보자.


int main()
{
	save("소스.cpp");

	cout << "메모리 계속 할당중 ";

	while (true) {
		int* p;
		try {
			p = new int[2500'0000];// 100MB
		}
		catch (exception& e) {	//예외
			cout << e.what() << endl;	//어떤 표준예외인지 확인
			break;	//정상종료시킨다.
		}

		for (int i = 0; i < 2500'0000; ++i)
			p[i] = i;

		this_thread::sleep_for(1s);

		cout << ".";	//죽기전까지 작업관리자 관찰 
						//=> 20번 점을 찍고(2GB) 프로그램 사망 -> 정상종료 하도록 제어를 해보자!
	}
	
}



----------------------------------------------
소스.cpp - 2020-10-17 오전 12:07:53 - (토요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>
#include <random>
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	//정수 1억개 파일에 저장
	ofstream out{ "정수 1억개.txt" };

	mt19937 eng; //디폴트 랜덤엔진과 같은 역활 (19937 비트로 랜덤수를 생성한다는 것)
	uniform_int_distribution<> uid;

	for (int i = 0; i < 100; ++i)
		cout << uid(eng) << ' ';



	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-17 오전 12:08:32 - (토요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>
#include <random>
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	//정수 1억개 파일에 저장
	ofstream out{ "정수 1억개.txt" };

	mt19937 eng; //디폴트 랜덤엔진과 같은 역활 (19937 비트로 랜덤수를 생성한다는 것)
	uniform_int_distribution<> uid;

	for (int i = 0; i < 100; ++i)
		out << uid(eng) << ' '; //목적지만 쓱 바꿈 파일에 저장됨



	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-17 오전 12:11:33 - (토요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>
#include <random>
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	/*
	//정수 1억개 파일에 저장
	ofstream out{ "정수 1억개.txt" };

	mt19937 eng; //디폴트 랜덤엔진과 같은 역활 (19937 비트로 랜덤수를 생성한다는 것)
	uniform_int_distribution<> uid;

	for (int i = 0; i < 100; ++i)
		out << uid(eng) << ' '; //목적지만 쓱 바꿈 파일에 저장됨
	*/

	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	int num;
	
	while (in >> num) //파일에서 num을 읽을수 있다면
		cout << num << ' ';
	

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-17 오전 12:16:53 - (토요일)
----------------------------------------------

//2020.2학기 C++															(6주2일)
//
//메모리가 모두 같은 곳에 사는게 아니다.
//1. STACK -지역변수
//2. DATA -전역변수,한 프로그램은 2GB까지 사용할 수 있다.(OS에서 제한)
//			전역데이터를 초기화하면 하드디스크에 기록된다.
//3. FREE Store -동적메모리(Dynamic Memory)
//				 dynamic -> 프로그램이 실행될때(프로그램이 메모리에 올라온 상태)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>
#include <random>
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	//정수 1억개 파일에 저장
	ofstream out{ "정수 1억개.txt" };

	mt19937 eng; //디폴트 랜덤엔진과 같은 역활 (19937 비트로 랜덤수를 생성한다는 것)
	uniform_int_distribution<> uid;

	cout << "기록중 ";
	for (int i = 0; i < 1'0000'0000; ++i) {
		out << uid(eng) << ' '; //목적지만 쓱 바꿈 파일에 저장됨

		if(!(i%100'0000))
			cout << '.';
	}

	/*
	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	int num;
	
	while (in >> num) //파일에서 num을 읽을수 있다면
		cout << num << ' ';
	*/

	save("소스.cpp");
}
