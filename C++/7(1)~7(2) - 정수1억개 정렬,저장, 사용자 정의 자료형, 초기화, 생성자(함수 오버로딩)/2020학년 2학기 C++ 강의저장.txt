


----------------------------------------------
소스.cpp - 2020-10-20 오후 12:36:53 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>
#include <random>
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	/*
	//정수 1억개 파일에 저장
	ofstream out{ "정수 1억개.txt" };

	mt19937 eng; //디폴트 랜덤엔진과 같은 역활 (19937 비트로 랜덤수를 생성한다는 것)
	uniform_int_distribution<> uid;

	cout << "기록중 ";
	for (int i = 0; i < 1'0000'0000; ++i) {
		out << uid(eng) << ' '; //목적지만 쓱 바꿈 파일에 저장됨

		if(!(i%100'0000))
			cout << '.';
	}
	*/

	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	int num;

	while (in >> num) //파일에서 num을 읽을수 있다면
		cout << num << ' ';


	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 1:16:57 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>	//stream => 흘러간다 , 즉 파일이 흘러간다 (iostream - 입출력(io)이 흘러간다.)
#include <random>
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
	}

	int num;
	int cnt{};

	cout << "정수 읽는 중";
	while (in >> num) { //파일에서 num을 읽을수 있다면
		//cout << num << ' ';	=> 미친짓!! 절대 프로그램이 안끝난다! (1초에 대략 화면에 100개의 정수를 찍는데 이를 계산하면 총 11일동안 계속 프로그램이 돌아야한다 ㄷㄷ)
		++cnt;
		if (!(cnt % 100'0000))
			cout << ".";
	}

	cout << "모두" << cnt << "개의 정수를 읽었습니다." << endl;


	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 1:24:35 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>	//stream => 흘러간다 , 즉 파일이 흘러간다 (iostream - 입출력(io)이 흘러간다.)
#include <random>
#include <algorithm>
#include <iomanip>	// 칸 맞춰 출력하기 함수 가짐
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

//방법 1 - 전역변수 STACK 사용
int arr[1'0000'0000];

int main()
{
	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
	}

	int num;
	int cnt{};

	cout << "정수 읽는 중";
	while (in >> num) { //파일에서 num을 읽을수 있다면
		//cout << num << ' ';	=> 미친짓!! 절대 프로그램이 안끝난다! (1초에 대략 화면에 100개의 정수를 찍는데 이를 계산하면 총 11일동안 계속 프로그램이 돌아야한다 ㄷㄷ)
		arr[cnt++] = num;	// 정수1억개 배열에 저장
		if (!(cnt % 100'0000))
			cout << ".";
	}	//점 100개 찍고 끝냄
	cout << endl;

	cout << "모두" << cnt << "개의 정수를 읽었습니다." << endl;

	//오름차순으로 정렬한다
	cout << "정렬하는 중";
	cnt = 0;
	sort(begin(arr), end(arr), [&cnt](int a, int b) { //복잡도 - O(n*log n)  //lamda capture - 형태 [&변수] => 람다함수 안에서 바깥변수의 원격조종을 위해 반드시 필요
		if (!(++cnt % 100'0000))
			cout << ".";
		return a < b;
		});		// 위보다 점 갯수는 훨씬 많지만, 배열의 정렬이 하드디스크에서 읽기보다는 훨씬 빠르다!! 

	// 정렬확인 - 앞에서 천개만 화면에 출력한다.
	for (int i = 0; i < 1'000; ++i)
		cout << setw(20) << arr[i];	// setw같은 함수는 원래 C++에서 잘 안쓰이지만 여기선 사용해본다.


	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 2:41:42 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>	//stream => 흘러간다 , 즉 파일이 흘러간다 (iostream - 입출력(io)이 흘러간다.)
#include <random>
#include <algorithm>
#include <iomanip>	// 칸 맞춰 출력하기 함수 가짐
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	//방법 2 - Free Store (HEAP - 동적 할당 변수)사용
	int* arr = new int[1'0000'0000];

	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
	}

	int num;
	int cnt{};

	cout << "정수 읽는 중";
	while (in >> num) { //파일에서 num을 읽을수 있다면
		//cout << num << ' ';	=> 미친짓!! 절대 프로그램이 안끝난다! (1초에 대략 화면에 100개의 정수를 찍는데 이를 계산하면 총 11일동안 계속 프로그램이 돌아야한다 ㄷㄷ)
		
		//arr[cnt++] = num;	
		*(arr + cnt++) = num;	//정식 표기
		if (!(cnt % 100'0000))
			cout << ".";
	}	//점 100개 찍고 끝냄
	cout << endl;

	cout << "모두" << cnt << "개의 정수를 읽었습니다." << endl;

	cout << "배열의 크기: " << _msize(arr) << "바이트"<<endl;	//_msize는 동적할당 변수의 크기를 구해주는 특별한 함수

	//오름차순으로 정렬한다
	cout << "정렬하는 중";
	cnt = 0;
	sort( /*arr은 변수가 아니라 시작번지이므로! 그대로 쓴다*/arr, arr + 1'0000'0000, [&cnt](int a, int b) {
		if (!(++cnt % 100'0000))
			cout << ".";
		return a < b;
		});		// 위보다 점 갯수는 훨씬 많지만, 배열의 정렬이 하드디스크에서 읽기보다는 훨씬 빠르다!! 
	
	cout << endl;

	// 뒤에서 부터 천개만 화면에 출력한다.
	for (int i = 0; i < 1'000; ++i)
		cout << setw(20) << arr[1'0000'0000 - 1 - i];

	delete[] arr;	//중요!!!! ===> "반드시 반환하자!"
					//new int[]는 delete[]로 삭제한다.

	// cout << "반환후 배열의 크기: " << _msize(arr) << endl;	=> arr을 반환해서 값이0되어 오류가나 실행이 안된다.
	
	cout << endl;
	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 3:12:19 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>	//stream => 흘러간다 , 즉 파일이 흘러간다 (iostream - 입출력(io)이 흘러간다.)
#include <random>
#include <algorithm>
#include <iomanip>	// 칸 맞춰 출력하기 함수 가짐
#include "save.h"	
using namespace std;

// [문제] 정수 1억개가 저장된 파일 "정수 1억개.txt"이 있다.
// 정수 1억개를 메모리에 읽어와라
// 메모리에 있는 정수 1억개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1억개오름차순.txt"로 저장하라.

int main()
{
	//방법 2 - Free Store (HEAP - 동적 할당 변수)사용
	int* arr = new int[1'0000'0000];

	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1억개.txt" };

	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
	}

	int num;
	int cnt{};

	cout << "정수 읽는 중";
	while (in >> num) { //파일에서 num을 읽을수 있다면
		//cout << num << ' ';	=> 미친짓!! 절대 프로그램이 안끝난다! (1초에 대략 화면에 100개의 정수를 찍는데 이를 계산하면 총 11일동안 계속 프로그램이 돌아야한다 ㄷㄷ)
		
		//arr[cnt++] = num;	
		*(arr + cnt++) = num;	//정식 표기

		if (!(cnt % 100'0000))
			cout << ".";
	}	//점 100개 찍고 끝냄
	cout << endl;

	cout << "모두" << cnt << "개의 정수를 읽었습니다." << endl;

	cout << "배열의 크기: " << _msize(arr) << "바이트" << endl;	//_msize는 동적할당 변수의 크기를 구해주는 특별한 함수

	//오름차순으로 정렬한다
	cout << "정렬하는 중";
	cnt = 0;
	sort( /*arr은 변수가 아니라 시작번지이므로! 그대로 쓴다*/arr, arr + 1'0000'0000, [&cnt](int a, int b) {
		if (!(++cnt % 100'0000))
			cout << ".";
		return a < b;
		});		// 위보다 점 갯수는 훨씬 많지만, 배열의 정렬이 하드디스크에서 읽기보다는 훨씬 빠르다!! 
	cout << endl;

	// 뒤에서 부터 천개만 화면에 출력한다.
	for (int i = 0; i < 1'000; ++i)
		cout << setw(20) << arr[1'0000'0000 - 1 - i];

	cout << endl;
	//정렬된 정수 1억개 파일에 저장
	ofstream out{ "정수 1억개오름차순.txt" };

	cout << "기록중 ";
	for (int i = 0; i < 1'0000'0000; ) {
		out << *(arr + i++) << ' ';

		if (!(i % 100'0000))
			cout << '.';
	}
	cout << endl;

	delete[] arr;	//중요!!!! ===> "반드시 반환하자!"
					//new int[]는 delete[]로 삭제한다.
	cout << "메모리 반환 완료!" << endl;
	// cout << "반환후 배열의 크기: " << _msize(arr) << endl;	=> arr을 반환해서 값이0되어 오류가나 실행이 안된다.

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 3:47:13 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <fstream>	//stream => 흘러간다 , 즉 파일이 흘러간다 (iostream - 입출력(io)이 흘러간다.)
#include <random>
#include <algorithm>
#include <iomanip>	// 칸 맞춰 출력하기 함수 가짐
#include "save.h"	
using namespace std;

// [문제] 정수 천개가 저장된 파일 "정수 1000개.txt"이 있다.
// 정수 1000개를 메모리에 읽어와라
// 메모리에 있는 정수 1000개를 오름차순으로 정렬하라.
// 정렬된 정수를 "정수 1000개오름차순.txt"로 저장하라.

int main()
{
	//정수 천개 파일에 저장
	ofstream out1{ "정수 1000개.txt" };

	mt19937 eng; //디폴트 랜덤엔진과 같은 역활 (19937 비트로 랜덤수를 생성한다는 것)
	uniform_int_distribution<> uid;

	cout << "기록중 ";
	for (int i = 0; i < 1'000; ++i) {
		out1 << uid(eng) << endl; //목적지만 쓱 바꿈 파일에 저장됨

		if (!(i % 100))
			cout << '.';
	}
	cout << endl;

	//방법 2 - Free Store (HEAP - 동적 할당 변수)사용
	int* arr = new int[1'000];

	//txt파일에서 정수를 읽어 오자
	ifstream in{ "정수 1000개.txt" };

	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
	}

	int num;
	int cnt{};

	cout << "정수 읽는 중";
	while (in >> num) { //파일에서 num을 읽을수 있다면
		*(arr + cnt++) = num;	//정식 표기

		if (!(cnt % 100))
			cout << '.';
	}	//점 10개 찍고 끝냄
	cout << endl;

	cout << "모두" << cnt << "개의 정수를 읽었습니다." << endl;

	cout << "배열의 크기: " << _msize(arr) << "바이트" << endl;	//_msize는 동적할당 변수의 크기를 구해주는 특별한 함수

	//오름차순으로 정렬한다
	cout << "정렬하는 중";
	cnt = 0;
	sort( /*arr은 변수가 아니라 시작번지이므로! 그대로 쓴다*/arr, arr + 1'000, [&cnt](int a, int b) {
		if (!(++cnt % 100))
			cout << ".";
		return a < b;
		});		// 위보다 점 갯수는 훨씬 많지만, 배열의 정렬이 하드디스크에서 읽기보다는 훨씬 빠르다!! 
	cout << endl;

	// 뒤에서 부터 천개 화면에 출력한다.
	for (int i = 0; i < 1'000; ++i)
		cout <<setw(20) << arr[1000-i-1] << endl;

	cout << endl;
	//정렬된 정수 1000개 파일에 저장
	ofstream out2{ "정수 1000개오름차순.txt" };

	cout << "기록중 ";
	for (int i = 0; i < 1'000;) {
		out2 << *(arr + i++) << endl;

		if (!(i % 100))
			cout << '.';
	}
	cout << endl;

	delete[] arr;	//중요!!!! ===> "반드시 반환하자!"
					//new int[]는 delete[]로 삭제한다.
	cout << "메모리 반환 완료!" << endl;
	// cout << "반환후 배열의 크기: " << _msize(arr) << endl;	=> arr을 반환해서 값이0되어 오류가나 실행이 안된다.

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 4:04:10 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct Dog {
	int age;
	string name;
};

int main()
{
	Dog dog;

	cout << sizeof(dog) << endl;	// 몇 바이트지? => (모드에따라 다르다!) x86기준 - release에서는 28/ debug에서는 32
					// 디버그 모드는 병목현상(시간이 어디서 지체되는지)이 발생하는 곳을 알려줄수있다. (상단 메뉴 - 분석 - 성능 프로파일러 클릭) 그래서 추가 계산을 해서 느린것...

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-21 오전 4:12:46 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct Dog {
	int age;
	string name;
};

int main()
{
	Dog dog;
	dog.age = 2;
	dog.name = "댕댕이";

	cout << "이름: " << dog.name << ", 나이: " << dog.age << endl;

	//cout << sizeof(dog) << endl;	// 몇 바이트지? => (모드에따라 다르다!) x86기준 - release에서는 28/ debug에서는 32
									// 디버그 모드는 병목현상(시간이 어디서 지체되는지)이 발생하는 곳을 알려줄수있다. (상단 메뉴 - 분석 - 성능 프로파일러 클릭) 그래서 추가 계산을 해서 느린것...

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-21 오전 4:21:47 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct Dog {
	//int age;	//4바이트 -> 21억까지 나이를 셀필요는 없는데...(메모리 낭비)
	char age;	//1바이트 => 이를 더욱 효율적이게 하기위해 사용자 정의 자료형을 만들고 싶다 ex) mynumber age;
	string name;	//24바이트
};

int main()
{
	Dog dog;

	cout << sizeof(Dog) << endl;	// padding현상 때문에 변함없다...
									// padding현상 => 시간상의 이득을 위해 공간을 희생한것(컴퓨터는 32비트씩=4바이트씩 메모리를 읽는다.)

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-21 오전 4:23:27 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct alignas(32) Dog {
	//int age;	//4바이트 -> 21억까지 나이를 셀필요는 없는데...(메모리 낭비)
	char age;	//1바이트 => 이를 더욱 효율적이게 하기위해 사용자 정의 자료형을 만들고 싶다 ex) mynumber age;
	string name;	//24바이트
};

int main()
{
	Dog dog;

	cout << sizeof(Dog) << endl;	// 32가 나온다.

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-21 오전 4:24:21 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct alignas(64) Dog {	// 2의 제곱수 바이트 만큼 메모리를 고정시키는것
	//int age;	//4바이트 -> 21억까지 나이를 셀필요는 없는데...(메모리 낭비)
	char age;	//1바이트 => 이를 더욱 효율적이게 하기위해 사용자 정의 자료형을 만들고 싶다 ex) mynumber age;
	string name;	//24바이트
};

int main()
{
	Dog dog;

	cout << sizeof(Dog) << endl;	// 64가 나온다.

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-21 오전 4:24:44 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct alignas(512) Dog {	// 2의 제곱수 바이트 만큼 메모리를 고정시키는것
	//int age;	//4바이트 -> 21억까지 나이를 셀필요는 없는데...(메모리 낭비)
	char age;	//1바이트 => 이를 더욱 효율적이게 하기위해 사용자 정의 자료형을 만들고 싶다 ex) mynumber age;
	string name;	//24바이트
};

int main()
{
	Dog dog;

	cout << sizeof(Dog) << endl;	// 512가 나온다.

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-21 오전 4:27:24 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

// [문제] Dog를 프로그램하고 싶다.
//		- Dog를 어떻게 표현하지? { 속성(물리량) - 행위(동작,함수) }
//		-> int 나이
//		-> string 이름

struct Dog {
	//int age;	//4바이트 -> 21억까지 나이를 셀필요는 없는데...(메모리 낭비)
	char age;	//1바이트 => 이를 더욱 효율적이게 하기위해 사용자 정의 자료형을 만들고 싶다 ex) mynumber age;
	string name;	//24바이트
};

int main()
{
	Dog dog;

	//프로젝트 속성 - c/c++ - 코드 생성 - 구조체 멤버 맞춤 - 1바이트 로 세팅(이렇게는 아무도 안쓰지만...)
	cout << sizeof(Dog) << endl;	// 25가 나온다.

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-21 오전 4:38:40 - (수요일)
----------------------------------------------

//2020.2학기 C++															(7주1일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <string>
#include "save.h"	
using namespace std;

struct Balloon {
	float x;
	float y;
};

// [문제] 풍선 100개를 생성
//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

int main()
{
	//거리계산
	cout << sqrt(3 * 3 + 4 * 4) << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 3:14:39 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

// [문제] 풍선 100개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	//도형을 그린다. -> 두 점을 주면 선을 그린다.

	//DrawLine(int x1,int y1,int x2,int y2); 보다는
	//DrawLine(Point start,Point end); 로 만들면 편함


	//거리계산
	cout << sqrt(3 * 3 + 4 * 4) << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 3:15:20 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?
//   - 메모리의 크기는 어떻게 정해지지?
//   - 메모리의 값을 어떻게 초기화하지?
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include "save.h"	
using namespace std;

// [문제] 풍선 100개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	cout << sizeof(Balloon) << endl; //8바이트

	save("소스.cpp");
}



----------------------------------------------
소스.cpp - 2020-10-26 오후 3:27:27 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 100개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[100];	//800바이트, 1'000'000 -> 가능할 것 같다!

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (int i=0;i<100;++i)
	{
		balloons[i].x = uid(dre);
		balloons[i].y = uid(dre);
	}

	// 풍선 100개와 폭탄의 거리 계산
	for (int i = 0;i < 100; ++i)
	{
		float dx = balloons[i].x - 50;
		float dy = balloons[i].y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cout<<"풍선("<< balloons[i].x << "," << balloons[i].y << ")" <<endl;
		}

	}

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 3:30:14 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 100개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[100];	//800바이트, 1'000'000 -> 가능할 것 같다!

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (int i=0;i<100;++i)
	{
		balloons[i].x = uid(dre);
		balloons[i].y = uid(dre);
	}

	int cnt{};
	// 풍선 100개와 폭탄의 거리 계산
	for (int i = 0;i < 100; ++i)
	{
		float dx = balloons[i].x - 50;
		float dy = balloons[i].y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cnt++;
			cout<<"풍선("<< balloons[i].x << "," << balloons[i].y << ")" <<endl;
		}
	}

	cout << "모두" << cnt << "개의 풍선이 터졌다." << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 11:52:38 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 100개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[1000];	

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (int i=0;i<1000;++i)
	{
		balloons[i].x = uid(dre);
		balloons[i].y = uid(dre);
	}

	int cnt{};
	// 풍선 100개와 폭탄의 거리 계산
	for (int i = 0;i < 1000; ++i)
	{
		float dx = balloons[i].x - 50;
		float dy = balloons[i].y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cnt++;
			cout<<"풍선("<< balloons[i].x << "," << balloons[i].y << ")" <<endl;
		}
	}

	cout << "모두" << cnt << "개의 풍선이 터졌다." << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 11:56:02 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 1000개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[1000];	//8000바이트

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (Balloon b : balloons)	//최대한 숫자의 종속을 없애자!!!!
	{
		b.x = uid(dre);
		b.y = uid(dre);
	}

	int cnt{};
	// 풍선 100개와 폭탄의 거리 계산
	for (Balloon b:balloons)
	{
		float dx = b.x - 50;
		float dy = b.y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cnt++;
			cout<<"풍선("<< b.x << "," << b.y << ")" <<endl;
		}
	}

	cout << "모두" << cnt << "개의 풍선이 터졌다." << endl;	//=> 0개? 잉?

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 11:57:34 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 1000개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[1000];	//8000바이트

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (Balloon& b : balloons)	//=> 참조가 잘못됨! => 원격조종울 해줘야한다.
	{
		b.x = uid(dre);
		b.y = uid(dre);
	}

	int cnt{};
	// 풍선 100개와 폭탄의 거리 계산
	for (Balloon& b:balloons)
	{
		float dx = b.x - 50;
		float dy = b.y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cnt++;
			cout<<"풍선("<< b.x << "," << b.y << ")" <<endl;
		}
	}

	cout << "모두" << cnt << "개의 풍선이 터졌다." << endl;	//=> 정상!

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-26 오후 11:58:16 - (월요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 10000개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[10000];	//80000바이트

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (Balloon& b : balloons)	//=> 참조가 잘못됨! => 원격조종울 해줘야한다.
	{
		b.x = uid(dre);
		b.y = uid(dre);
	}

	int cnt{};
	// 풍선 100개와 폭탄의 거리 계산
	for (Balloon& b:balloons)
	{
		float dx = b.x - 50;
		float dy = b.y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cnt++;
			cout<<"풍선("<< b.x << "," << b.y << ")" <<endl;
		}
	}

	cout << "모두" << cnt << "개의 풍선이 터졌다." << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:05:01 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	
#include <random>
#include "save.h"	
using namespace std;

// [문제] 풍선 10000개를 생성

//		  풍선의 x,y값을 [0,100]사이의 랜덤값으로 설정한다.
//		  위치 (50,50)에서 반경 20의 영향을 미치는 폭탄이 터졌다.
//		  폭탄의 영향권에 있는 풍선의 정보를 출력
// - 풍선(x,y)
//		  전체 영향을 받는 풍선의 갯수를 출력

struct Balloon {
	float x;
	float y;
};


int main()
{
	Balloon balloons[10000];	//80000바이트

	default_random_engine dre;
	uniform_int_distribution<> uid{ 0,100 };

	for (Balloon& b : balloons)	
	{
		b.x = uid(dre);
		b.y = uid(dre);
	}

	int cnt{};
	
	for (const Balloon& b:balloons)	//=> const->읽기전용,따라서 const &->복사만 하기위해 위치값만 불러온것
	{				//	(&를 하면 원격조종이 가능하니까 이걸 막은 것임!)
		float dx = b.x - 50;
		float dy = b.y - 50;
	
		if (sqrt(dx * dx + dy * dy) <= 20.0) {
			cnt++;
			cout<<"풍선("<< b.x << "," << b.y << ")" <<endl;
		}
	}

	cout << "모두" << cnt << "개의 풍선이 터졌다." << endl;	

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:12:38 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog; //변수 dog가 객체이다.

	//화면에 "1.댕댕이"라고 출력되도록 하라
	cout << dog.age << "," << dog.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:16:12 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age {1};
	string name{"댕댕이"};
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog; //변수 dog가 객체이다.

	//화면에 "1.댕댕이"라고 출력되도록 하라 -메인을 손대자말고
	cout << dog.age << "," << dog.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:24:13 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	int n; //이것을 초기화하는 방법들은?

	//int n = 0;
	//int x = 0; n = x;	//초기화 아님
	//int n{ 0 };
	//int n = int();
	//int n = int{};
	//int n = int{0};	//모두 0으로 초기화
	//등등등
	//int n{0};	->{}기호는 만국 공통 초기화 기호(uniform initialization)
	//n=0; =>초기화가 아니다! => 값을 배정(assignedmet)받은 것에 불과함

	Dog dog; //dog[10]이라하면 모두 값이 고정되어 들어가있게됨

	//화면에 "1.댕댕이"라고 출력되도록 하라 -메인을 손대자말고
	cout << dog.age << "," << dog.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:27:16 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	new int{ 1 }; //가능

	Dog dog{ 1,"댕댕이"};	//위와 비슷하게 초기화 가능

	//화면에 "1.댕댕이"라고 출력되도록 하라 -메인을 손대지 않고
	cout << dog.age << "," << dog.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:32:35 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	//fuction overloading-> 클래스와 같은 이름의 함수를 이용하여 초기화 방법을 지정할 수 있음!
	Dog(int age, string name) :age{ age }, name{ name } {
	}
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog{1,"댕댕이"};

	//화면에 "1.댕댕이"라고 출력되도록 하라 -메인을 손대지 않고
	cout << dog.age << "." << dog.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:34:19 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	//fuction overloading-> 클래스와 같은 이름의 함수를 이용하여 초기화 방법을 지정할 수 있음!
	Dog(int age, string name) :age{ age }, name{ name } {
	}

	Dog(string name,int age) :age{ age }, name{ name } {
	}
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog1{1,"댕댕이"};
	cout << dog1.age << "." << dog1.name << endl;

	Dog dog2{"쵸코",2 };//순서가 바뀌어도 잘 들어간다.
	cout << dog2.age << "." << dog2.name << endl;


	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:39:37 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;


	Dog() {	// default(기본) 생성자

	}

	//fuction overloading(함수 생성자) -> 클래스와 같은 이름의 함수를 이용하여 초기화 방법을 지정할 수 있음!
	Dog(int age, string name) :age{ age }, name{ name } {
	}

	Dog(string name,int age) :age{ age }, name{ name } {
	}
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog1{1,"댕댕이"};
	cout << dog1.age << "." << dog1.name << endl;

	Dog dog2{"쵸코",2 };							//순서가 바뀌어도 잘 들어간다.
	cout << dog2.age << "." << dog2.name << endl;

	//[문제] dog3의 나이는 3,이름 "코코"를 만들되 메인은 바꾸지 말자. - 첫 질문
	Dog dog3;	//생성자 없이는 못만들게하므로 Dog를 바꿔줄 필요가 있다.
	cout << dog3.age << "." << dog3.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:40:08 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age{3};
	string name{"코코"};


	Dog() {	// default(기본) 생성자

	}

	//fuction overloading(함수 생성자) -> 클래스와 같은 이름의 함수를 이용하여 초기화 방법을 지정할 수 있음!
	Dog(int age, string name) :age{ age }, name{ name } {
	}

	Dog(string name,int age) :age{ age }, name{ name } {
	}
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog1{1,"댕댕이"};
	cout << dog1.age << "." << dog1.name << endl;

	Dog dog2{"쵸코",2 };							//순서가 바뀌어도 잘 들어간다.
	cout << dog2.age << "." << dog2.name << endl;

	//[문제] dog3의 나이는 3,이름 "코코"를 만들되 메인은 바꾸지 말자. - 첫 질문
	Dog dog3;	//생성자 없이는 못만들게하므로 Dog를 바꿔줄 필요가 있다.
	cout << dog3.age << "." << dog3.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:40:34 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age{3};
	string name{"코코"};


	Dog() = default;

	//fuction overloading(함수 생성자) -> 클래스와 같은 이름의 함수를 이용하여 초기화 방법을 지정할 수 있음!
	Dog(int age, string name) :age{ age }, name{ name } {
	}

	Dog(string name,int age) :age{ age }, name{ name } {
	}
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog1{1,"댕댕이"};
	cout << dog1.age << "." << dog1.name << endl;

	Dog dog2{"쵸코",2 };							//순서가 바뀌어도 잘 들어간다.
	cout << dog2.age << "." << dog2.name << endl;

	//[문제] dog3의 나이는 3,이름 "코코"를 만들되 메인은 바꾸지 말자. - 첫 질문
	Dog dog3;	//생성자 없이는 못만들게하므로 Dog를 바꿔줄 필요가 있다.
	cout << dog3.age << "." << dog3.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:41:59 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age{3};
	string name{"코코"};

	Dog() = default;
	//Dog() = delete;	//기본 생성 못하도록 지우는 것

	//fuction overloading(함수 생성자) -> 클래스와 같은 이름의 함수를 이용하여 초기화 방법을 지정할 수 있음!
	Dog(int age, string name) :age{ age }, name{ name } {
	}

	Dog(string name,int age) :age{ age }, name{ name } {
	}
};

//[문제] 사용자가 정의한 자료형의 객체(Object)를 초기화하자.

int main()
{
	Dog dog1{1,"댕댕이"};
	cout << dog1.age << "." << dog1.name << endl;

	Dog dog2{"쵸코",2 };							//순서가 바뀌어도 잘 들어간다.
	cout << dog2.age << "." << dog2.name << endl;

	//[문제] dog3의 나이는 3,이름 "코코"를 만들되 메인은 바꾸지 말자. - 첫 질문
	Dog dog3;	//생성자 없이는 못만들게하므로 Dog를 바꿔줄 필요가 있다.
	cout << dog3.age << "." << dog3.name << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:47:49 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// [초기화]란 생성과 동시에 값을 지정해주는 것이다.
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	Dog() {
		cout << "Dog를 디폴트 생성하였다" << endl;
	}
};

int main()
{
	int n;		//탄생 과정을 지켜볼 수 없음(컴퓨터가 알아서 다함)
	Dog dog;	//이 순간에 Dog()함수가 반드시 호출된다.

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:48:03 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// [초기화]란 생성과 동시에 값을 지정해주는 것이다.
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	Dog() {
		cout << "Dog를 디폴트 생성하였다" << endl;
	}
};

int main()
{
	int n;		//탄생 과정을 지켜볼 수 없음(컴퓨터가 알아서 다함)
	Dog dog[10];	//이 순간에 Dog()함수가 반드시 호출된다.

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:52:17 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// [초기화]란 생성과 동시에 값을 지정해주는 것이다.
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	Dog() {			//(디폴트)생성자
		cout << "Dog를 디폴트 생성하였다" << endl;
	}

	~Dog()			//Tilde - 소멸자
	{
		cout << "Dog를 소멸되었다." << endl;
	}
};

int main()
{
	int n;		//탄생 과정을 지켜볼 수 없음(컴퓨터가 알아서 다함)
	Dog dog[10];	//이 순간에 Dog()함수가 반드시 호출된다.

	save("소스.cpp");
}//지역을 나가면 지역변수는 소멸된다. => 소멸자로 관찰할 수 있다!


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:53:15 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// [초기화]란 생성과 동시에 값을 지정해주는 것이다.
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	Dog() {			//(디폴트)생성자
		cout << "Dog를 디폴트 생성하였다" << endl;
	}

	~Dog()			//Tilde - 소멸자
	{
		cout << "Dog를 소멸되었다." << endl;
	}
};

int main()
{
	cout << "메인 시작" << endl;
	Dog dog;
	cout << "메인 끝" << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:54:05 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// [초기화]란 생성과 동시에 값을 지정해주는 것이다.
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	Dog() {			//(디폴트)생성자
		cout << "Dog를 디폴트 생성하였다" << endl;
	}

	~Dog()			//Tilde - 소멸자
	{
		cout << "Dog를 소멸되었다." << endl;
	}
};



int main()
{
	cout << "메인 시작" << endl;
	{	//이게 지역이라는 것이다.
		Dog dog;
	}
	cout << "메인 끝" << endl;

	save("소스.cpp");
}


----------------------------------------------
소스.cpp - 2020-10-27 오전 12:54:48 - (화요일)
----------------------------------------------

//2020.2학기 C++															(7주2일)
//
// 핵심 질문 내용
//
// 사용자 정의 자료형 (User-defined Data Type)
//   - 자료형은 어떻게 만들지?				-struct,class
//   - 메모리의 크기는 어떻게 정해지지?		-속도우선
//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
//
// [초기화]란 생성과 동시에 값을 지정해주는 것이다.
//
// 시험2 예정 - 11월 9일(월요일 10주 1일)
//----------------------------------------------------------------------------------

#pragma warning(disable:4996)
#include <iostream>	//안쓰는 전처리기는 지우자! -> 용량차지한다...
#include <string>
#include "save.h"	
using namespace std;

//   - 메모리의 값을 어떻게 초기화하지?		-특별하게(special fuction)
struct Dog {
	int age;
	string name;

	Dog() {			//(디폴트)생성자
		cout << "Dog를 디폴트 생성하였다" << endl;
	}

	~Dog()			//Tilde - 소멸자
	{
		cout << "Dog를 소멸되었다." << endl;
	}
};

Dog dog;

int main()
{
	cout << "메인 시작" << endl;
	cout << "메인 끝" << endl;

	save("소스.cpp");
}